---
import { date, excerpt, title } from "../../packages/utils/extract";
import Global from "../../packages/layouts/Global.astro";
import BaseHead from "../../packages/components/BaseHead.astro";
import { ROUTES, SITE_DESCRIPTION, SITE_TITLE } from "../../packages/consts";
import Footer from "../../packages/components/Footer.astro";
import NotFound from "./404.astro";

import {
  getFilteredPage,
  getAllFilterEntries,
} from "../../packages/utils/filter";
import MantineHeader from "../components/MantineHeader";
import MantineMain from "../components/MantineMain";
import BlogList from "../components/BlogList";

export const prerender = true;

export const getStaticPaths = getFilteredPage;
const posts = await Promise.all(
  Astro.props.posts.slice(0, 48).map(async (post) => ({
    id: post.id,
    title: title(post),
    date: date(post),
    data: post.data,
    excerpt: await excerpt(post),
  }))
);

const { filter } = Astro.params;
const subTitle = filter.replaceAll("/", " | ");
const validFiltes = await getAllFilterEntries();
const parts = filter.split("/").filter(Boolean) ?? [];
const isValidFilter = validFiltes.some((f) => f === parts[0]);
---

{
  isValidFilter ? (
    <Global>
      <BaseHead
        title={`${SITE_TITLE} | ${subTitle}`}
        description={SITE_DESCRIPTION}
        slot="head"
      />
      <MantineHeader
        title={SITE_TITLE}
        links={ROUTES}
        pathname={Astro.url.pathname}
      />
      <MantineMain>
        <BlogList posts={posts} client:only></BlogList>
        <Footer />
      </MantineMain>
    </Global>
  ) : (
    <NotFound />
  )
}
