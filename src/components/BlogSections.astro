---
import dayjs from "dayjs";
import {
  getAllPostByDateDesc,
  initYearMonthPostMap,
} from "@/packages/utils/filter";
import { date } from "@/packages/utils/extract";
import { mapServerPostToClient, type T_PROPS } from "@/packages/utils/post";
import { getCounts } from "@/packages/utils/heatmap";
import type { CollectionEntry } from "astro:content";
import { FILTER_ENTRY } from "@/packages/consts";
import GridHalf from "@/packages/scaffold/GridHalf";
import BlogCarousel from "@/packages/carousel/BlogCarousel";
type T_POST = T_PROPS;

const _posts = await getAllPostByDateDesc();
const latestPosts = await mapServerPostToClient(_posts.slice(0, 5));

const buildYear = dayjs().format("YYYY");
const buildMonth = dayjs().format("MM");
const buildDay = dayjs().format("DD");
const monthPostMap = initYearMonthPostMap(_posts);

const sameMonthPosts: T_POST[] = [];

for (const [yearMonth, postsSet] of monthPostMap) {
  const [_year, month] = yearMonth.split("-");

  if (_year === buildYear) continue;

  if (month === buildMonth) {
    sameMonthPosts.push(...Array.from(postsSet));
  }
}

const postsWithDayProximity = sameMonthPosts.map((post) => {
  const postDate = dayjs(date(post));
  const postDay = postDate.format("DD");
  const dayDiff = Math.abs(parseInt(postDay) - parseInt(buildDay));

  return {
    post,
    dayDiff,
    postDay: parseInt(postDay),
  };
});

const sortedByDayProximity = postsWithDayProximity.sort((a, b) => {
  if (a.dayDiff !== b.dayDiff) {
    return a.dayDiff - b.dayDiff;
  }
  return a.postDay - b.postDay;
});

const selectedMonthPosts = sortedByDayProximity
  .slice(0, 5)
  .map((item) => item.post);
let historyPosts = await mapServerPostToClient(selectedMonthPosts)
const hPostWithCover = historyPosts.filter(p => p.data.cover).sort((a, b) => Number(a.date) - Number(b.date))
const hPostNoCover = historyPosts.filter(p => !p.data.cover).sort((a, b) => Number(a.date) - Number(b.date))
historyPosts = [...hPostWithCover, ...hPostNoCover]

const counts = await getCounts();
---

<GridHalf>
  <BlogCarousel slot="left" title="Latest Posts" posts={latestPosts} link={{label: `View All ${counts[FILTER_ENTRY.ALL]} Posts`, href: "/all"}} client:load />
  <BlogCarousel slot="right" title="Time Machine" posts={historyPosts} link={{label: "View Archivess", href: "/year"}} client:load />
</GridHalf>

